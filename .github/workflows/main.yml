name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.18'  # Reemplaza con la versión de Go que estás utilizando

    - name: Install Dependencies and Build Go Backend
      run: |
        go mod download
        go build -o backend ./backend/main.go

    - name: Build and Test React Frontend
      working-directory: frontend
      run: |
        npm install
        npm test -- --passWithNoTests
        npm run build

    - name: Upload Frontend Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: frontend
        path: frontend/build

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.18'  

    - name: Install Dependencies
      run: go mod download

    - name: Run Unit Tests
      working-directory: backend
      run: go test ./...

  build-and-publish-docker:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/ingsw3-final:latest

    - name: Log in to Docker Hub
      run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/ingsw3-final:latest
      
    - name: Clean up
      run: docker logout
      if: always() # Se ejecutará incluso si un paso anterior falla

  deploy:
    needs: build-and-publish-docker
    runs-on: ubuntu-latest

    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        name: frontend
        path: frontend

    - name: Output contents
      run: ls

    - name: Deploy to Server
      run: |
        echo "Deploy"
